{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["/*відповідає за взаємодію з API сервісу Pixabay — тобто робить HTTP-запити, отримує від сервера дані (зображення) за заданим пошуковим запитом і повертає їх у вигляді обробленого результату.*/\n\n// Імпортую бібліотеку для HTTP-запитів\nimport axios from 'axios';\n\n//Створюю константи для роботи з API Pixabay\nconst API_KEY = '50290691-d51719558e36c91c48babc26d'; // Мій унікальний  API-ключ сервісу Pexibay\n\nconst BASE_URL = 'https://pixabay.com/api/'; // Базова URL-адреса для запитів\n\nconst PER_PAGE = 15;\n\n// Функція для отримання зображень за пошуковим запитом\nexport async function getImagesByQuery(query, page = 1) {\n  // перевірка отриманого параметра функції\n  // console.log('Виклик функції getImagesByQuery із запитом:', query);\n\n  /*Створюю змінну де кладу параметри запиту, які будуть передані у URL.Використовуючи цю змінну, я передаю параметри у функцію axios.get, яка додає їх до запиту в форматі URL-параметрів (query string).*/\n  const params = {\n    key: API_KEY, // Мій ключ для автентифікації\n    q: query, // Пошукове слово, що користувач ввів в пошукове поле\n    image_type: 'photo', // фільтрую лише зображення\n    orientation: 'horizontal', // Орієнтація зображень-горізогтальна\n    safesearch: true, // Фільтр для безпечного пошуку\n    per_page: 15, // Максимальна кількість результатів за запитом\n    page: page,\n  };\n\n  //тут я прописую обробку помилки яка може виникнути під час запиту.Відбувається виклик axios.get  \n  try {\n    // Виконую GET-запит до API з використанням axios\n    const response = await axios.get(BASE_URL, { params });\n\n  \n\n    // Повертаю дані (масив зображень hits)\n    return response.data;\n\n  } catch (error) {\n    // Якщо сталася помилка, викидаю її для обробки на рівні виклику функції\n    throw error;\n  }\n}","/*createGallery(images) — формує і додає HTML в .gallery.\n\nclearGallery() — очищає HTML в .gallery.\n\nshowLoader() / hideLoader() — керують індикатором завантаження.\n\nshowLoadMoreButton() / hideLoadMoreButton() — показують або ховають кнопку завантаження.*/\n\n\n// Імпортую бібліотеку для лайтбоксу\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\n// Знаходжу контейнер для галереї\nconst galleryContainer = document.querySelector('.gallery'); // Вибираю елемент галереї за класом \"gallery\"\n\n// знаходжу кнопку для пролістування галереі\nconst loadMoreButton = document.querySelector('.select');\n\n// знаходжу індікатор завантаження\nconst loader = document.querySelector('.loader');\n\n// перевірка елемента галереї\n// console.log('Контейнер галереї знайдено:', galleryContainer);\n\nlet lightbox = null; // Змінна для екземпляра SimpleLightbox\n// console.log('Ініціалізовано змінну для SimpleLightbox:', lightbox); // перевіряю початкового значення змінної\n\n// Функція для створення галереї з масиву зображень\nexport function createGallery(images) {\n  // Перевіряю отриманий масив зображень\n  console.log('Виклик createGallery. Масив зображень:', images);\n\n  try {\n    // Генерую HTML-розмітку для кожного елемента з масиву зображень\n    const markup = images\n      .map(\n        ({\n          webformatURL, // URL для відображення маленького зображення\n          largeImageURL, // URL для великого зображення\n          tags, // Опис зображення\n          likes, // Кількість лайків\n          views, // Кількість переглядів\n          comments, // Кількість коментарів\n          downloads, // Кількість завантажень\n        }) => {\n          //Виводжу  дані, які обробляються.\n          console.log('Обробка зображення:', {\n            webformatURL,\n            largeImageURL,\n            tags,\n          });\n          return `\n        <li class=\"gallery-item\">\n          <a href=\"${largeImageURL}\" class=\"gallery-link\">\n          <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n          </a>\n        <div class=\"info\">\n        <p><b>Likes:</b> ${likes}</p>\n        <p><b>Views:</b> ${views}</p>\n        <p><b>Comments:</b> ${comments}</p>\n        <p><b>Downloads:</b> ${downloads}</p>\n      </div>\n    </li>`;\n        }\n      )\n\n      //Метод .join('') перетворює масив рядків, отриманих після виконання .map(), в єдиний рядок.\n      .join('');\n\n    // Додаю згенеровану розмітку в контейнер галереї\n    galleryContainer.insertAdjacentHTML('beforeend', markup);\n\n    // Перевіряю чи вже існує екземпляр SimpleLightbox\n    if (lightbox) {\n      lightbox.refresh(); // Якщо так,оновлюю існуючий екземпляр лайтбоксу для нових елементів\n    } else {\n      //створюю новий екземпляр SimpleLightbox\n      lightbox = new SimpleLightbox('.gallery a', {\n        captionsData: 'alt', // Використовую атрибут \"alt\" для підписів зображення\n        captionDelay: 250, // Затримка перед показом підпису\n      });\n\n      //перевіряю створення\n      // console.log('Створено новий екземпляр SimpleLightbox:', lightbox);\n\n      // Показуємо кнопку після додавання зображень\n    }\n    // Показати кнопку \"Load more\" якщо є зображення\n    if (galleryContainer.children.length > 0) {\n      loadMoreButton.classList.remove('is-hidden');\n    }\n   \n  } catch (error) {\n    console.error('Помилка у createGallery:', error);\n    throw error;\n  }\n}\n// Функція для очищення галереї\nexport async function clearGallery() {\n  try {\n    galleryContainer.innerHTML = ''; // видаляю весь HTML-контент с контейнера галереї\n\n    // Сховати кнопку під час нового пошуку\n   await hideLoadMoreButton();\n\n    console.log('Галерея очищена.');\n  } catch (error) {\n\n    // Обробка помилок під час очищення\n    console.error('Помилка у функції clearGallery:', error);\n    throw new Error('Не вдалося очистити галерею.');\n  }\n}\n\n// Функція для відображення\n\nexport async function showLoader() {\n  // console.log('Виклик функції showLoader.'); //  виклику функції\n\n  try {\n    //\n    loader.style.display = 'block';\n\n    console.log('Клас \"loading\" додано до тега <body>.'); // підтвердження додавання класу після невірного вводу\n  } catch (error) {\n    // Обробка помилок під час відображення лоадера\n    console.error('Помилка у функції showLoader:', error);\n    throw new Error('Не вдалося показати лоадер.');\n  }\n}\n\n// Функція для приховування\nexport async function hideLoader() {\n  // console.log('Виклик функції hideLoader.'); //  виклик\n  try {\n    //  document.body.classList.remove('loading');  // Видаляю клас \"loading\" з <body>, щоб приховати стилі лоадера\n    loader.style.display = 'none';\n    // console.log('Клас \"loading\" видалено з тега <body>.'); //  підтвердження видалення класу\n  } catch (error) {\n    // Обробка помилок під час приховування лоадера\n    console.error('Помилка у функції hideLoader:', error);\n    throw new Error('Не вдалося приховати лоадер.');\n  }\n}\n// Показати кнопку\nexport async function showLoadMoreButton() {\n  try {\n    loadMoreButton.classList.remove('is-hidden');\n  } catch (error) {\n    console.error('Помилка при показі кнопки Load more:', error);\n    throw error;\n  }\n}\n// Приховати кнопку\nexport async function hideLoadMoreButton() {\n  try {\n    loadMoreButton.classList.add('is-hidden');\n  } catch (error) {\n    console.error('Помилка при приховуванні кнопки Load more:', error);\n    throw error;\n  }\n}\n\n\n\n\n\n\n\n\n","/*При сабміті форми (submit):\n\nОчищаємо галерею і скидаємо сторінку (currentPage = 1).\n\nЗапитуємо першу сторінку з новим запитом.\n\nПоказуємо повідомлення про знайдену кількість зображень.\n\nКнопка Load More стає видимою, якщо є ще сторінки.\n\nПри кліку на Load More:\n\nЗапитуємо наступну сторінку (currentPage збільшується після кожного запиту).\n\nДодаємо нові зображення до галереї.\n\nОновлюємо SimpleLightbox (refresh).\n\nЯкщо досягнуто останньої сторінки — ховаємо кнопку та показуємо повідомлення.\n\nПрокрутка сторінки при додаванні нових карток виконується так, щоб користувач бачив новий контент.*/\n\n\n\n\nimport { getImagesByQuery } from './js/pixabay-api.js';\nimport {\n  createGallery,\n  clearGallery,\n  showLoadMoreButton,\n  hideLoadMoreButton,\n} from './js/render-functions.js';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst form = document.querySelector('.form');\nconst input = form.querySelector('input[name=\"search-text\"]');\nconst loader = document.querySelector('.loader');\nconst loadMoreButton = document.querySelector('.select');\nconst gallery = document.querySelector('.gallery');\n\nlet currentQuery = '';\nlet currentPage = 1;\nlet totalHits = 0;\nlet isLoading = false;\n\nfunction showLoader() {\n  if (loader) loader.style.display = 'block';\n}\n\nfunction hideLoader() {\n  if (loader) loader.style.display = 'none';\n}\n\nfunction delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function loadImages(isFirstLoad = false) {\n  if (isLoading) return;\n\n  isLoading = true;\n  showLoader();\n  hideLoadMoreButton();\n\n  try {\n    await delay(1000);\n\n    const data = await getImagesByQuery(currentQuery, currentPage);\n\n    if (!data.hits || data.hits.length === 0) {\n      clearGallery();\n      console.clear();\n      iziToast.info({\n        title: 'Нічого не знайдено',\n        message:\n          'Sorry, there are no images matching your search query. Please try again!',\n        position: 'topRight',\n      });\n      hideLoadMoreButton();\n      hideLoader();\n      isLoading = false;\n      return;\n    }\n\n    if (isFirstLoad) {\n      clearGallery();\n      totalHits = data.totalHits;\n\n      const maxPages = Math.ceil(totalHits / 15);\n      console.clear();\n      console.log(`Новий запит: \"${currentQuery}\"`);\n      console.log(\n        `Загальна кількість результатів: ${totalHits}, Максимальна кількість сторінок: ${maxPages}`\n      );\n\n      iziToast.success({\n        title: 'Успіх',\n        message: `Знайдено ${totalHits} зображень.`,\n        position: 'topRight',\n        timeout: 2000,\n      });\n    }\n\n    createGallery(data.hits);\n\n    if (isFirstLoad) {\n      // При першому запиті скролимо вгору\n      window.scrollTo({\n        top: 0,\n        behavior: 'smooth',\n      });\n    } else {\n      // При наступних запитах – скролимо вниз, якщо контент більший за висоту вікна\n      const firstCard = gallery.querySelector('.photo-card');\n      if (firstCard) {\n\n        const cardHeight = firstCard.getBoundingClientRect().height || 200; // Висота картки (default 200)\n        const galleryHeight = gallery.scrollHeight;\n\n        if (galleryHeight > window.innerHeight) {\n          window.scrollBy({\n            top: cardHeight * 2,\n            behavior: 'smooth',\n          });\n        }\n      }\n    }\n\n    const maxPages = Math.ceil(totalHits / 15);\n    console.log(`Поточна сторінка: ${currentPage} / ${maxPages}`);\n\n    if (currentPage >= maxPages) {\n      iziToast.info({\n        title: 'Кінець колекції',\n        message: \"We're sorry, but you've reached the end of search results.\",\n        position: 'topRight',\n      });\n      hideLoadMoreButton();\n    } else {\n      currentPage += 1;\n      showLoadMoreButton();\n    }\n  } catch (error) {\n    console.error('Помилка запиту:', error);\n    iziToast.error({\n      title: 'Помилка',\n      message: 'Не вдалося завантажити зображення. Спробуйте пізніше.',\n      position: 'topRight',\n    });\n  } finally {\n    hideLoader();\n    isLoading = false;\n  }\n}\n\nform.addEventListener('submit', async event => {\n  event.preventDefault();\n\n  const query = input.value.trim();\n\n  if (!query) {\n    iziToast.error({\n      title: 'Помилка',\n      message: 'Будь ласка, введіть пошуковий запит.',\n      position: 'topRight',\n    });\n    return;\n  }\n\n  currentQuery = query;\n  currentPage = 1;\n  totalHits = 0;\n\n  await loadImages(true);\n  input.value = '';\n});\n\nloadMoreButton.addEventListener('click', async () => {\n  console.log('Кнопка Load More натиснута');\n  await loadImages(false);\n});\n\n\n\n"],"names":["API_KEY","BASE_URL","getImagesByQuery","query","page","params","axios","error","galleryContainer","loadMoreButton","lightbox","createGallery","images","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","SimpleLightbox","clearGallery","hideLoadMoreButton","showLoadMoreButton","form","input","loader","gallery","currentQuery","currentPage","totalHits","isLoading","showLoader","hideLoader","delay","ms","resolve","loadImages","isFirstLoad","data","iziToast","maxPages","firstCard","cardHeight","event"],"mappings":"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"}