{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["/*Призначення файлу:Відповідає за взаємодію з API сервісу Pixabay:\n      1.Робить HTTP - запит через axios.\n      2.Надсилає пошуковий запит, який ввів користувач.\n      3.Отримує масив зображень з Pixabay.\n      4.Повертає ці зображення в основний застосунок.*/\n\n// Імпортую бібліотеку для HTTP-запитів, вона спрощує роботу з HTTP-запитами\nimport axios from 'axios';\n\n//Створюю константи для роботи з API Pixabay\nconst API_KEY = '50290691-d51719558e36c91c48babc26d'; // Мій унікальний  API-ключ сервісу Pexibay. Без нього сервер не дозволить зробити запит.\n\nconst BASE_URL = 'https://pixabay.com/api/'; // Базова URL-адреса для запитів, до якого нижче я додаю параметри пошуку (ключ, запит, сторінка тощо)\n\n const PER_PAGE = 15; /* Експортую, щоб можна було використовувати в main.js\n Кількість зображень на сторінку, яку я можу отримати від API. Це обмеження API, яке я можу змінити, якщо потрібно більше або менше зображень на сторінку.*/\n\n// Функція для отримання зображень за пошуковим запитом\nexport async function getImagesByQuery(query, page = 1) {\n\n  // перевірка отриманого параметра функції\n  console.log('Виклик функції getImagesByQuery із запитом:', query,page);\n\n  /*Створюю змінну де кладу параметри запиту, які будуть передані у URL.Використовуючи цю змінну, я передаю параметри у функцію axios.get, яка додає їх до запиту в форматі URL-параметрів (query string).*/\n\n  const params = {\n    //змінна приймає об'єкт з усіма параметрами які потрібні до API\n    key: API_KEY,                 // Мій ключ для автентифікації\n    q: query,                    // Пошукове слово, що користувач ввів в пошукове поле\n    image_type: 'photo',        // фільтрую лише зображення\n    orientation: 'horizontal', // Орієнтація зображень-горізогтальна\n    safesearch: true,         // Фільтр для безпечного пошуку\n    per_page: PER_PAGE,      // Максимальна кількість результатів за запитом\n    page: page,             // поточна сторінка\n  };\n\n  //тут я прописую обробку помилки яка може виникнути під час запиту.Відбувається виклик axios.get\n  try {\n    // Виконую GET-запит до API з використанням axios\n    const response = await axios.get(BASE_URL, { params });\n\n    // Повертаю дані (масив зображень hits)\n    return response.data;\n  } catch (error) {\n   \n    // Якщо сталася помилка, викидаю її для обробки на рівні виклику функції\n    throw error;\n  }\n}\n","\n\n /* Файл відповідає за роботу інтерфейсу галереї.\n\n 1.createGallery(images) — формує і додає HTML в .gallery.\n 2.clearGallery() — очищає HTML в .gallery.\n 3.showLoader() / hideLoader() — керують індикатором завантаження.\n 4.showLoadMoreButton() / hideLoadMoreButton() — показують або ховають кнопку завантаження.\n5. у файлі ініціалізується SimpleLightbox — бібліотека для модального перегляду зображень.\n */\n\n\n\n/* Імпорт бібліотеки SimpleLightbox для перегляду зображень у модальному вікні (збільшення за кліком).*/\n\n import SimpleLightbox from 'simplelightbox';\n import 'simplelightbox/dist/simple-lightbox.min.css';\n\n// Пошук елементів у DOM, які потрібні для роботи галереї\n\n // Знаходжу контейнер для галереї. Щоб надалі працювати з елементами,зберігаю їх у змінних.\nconst galleryContainer = document.querySelector('.gallery'); // Вибираю елемент галереї за класом \"gallery\"\n\n // знаходжу кнопку для пролістування галереі\n const loadMoreButton = document.querySelector('.select');\n\n // знаходжу індікатор завантаження\n const loader = document.querySelector('.loader');\n\n// перевірка елемента галереї\nconsole.log('Контейнер галереї знайдено:', galleryContainer);\n\n let lightbox = null; // Змінна для екземпляра SimpleLightbox.Вона буде містить екземпляр бібліотеки SimpleLightbox, щоб оновлювати або ініціалізувати lightbox після рендера.\n// console.log('Ініціалізовано змінну для SimpleLightbox:', lightbox); // перевіряю початкового значення змінної\n\n /* Функція createGallery\n   Приймає масив об'єктів (зображень) і додає їх до галереї.Також налаштовує або оновлює модальне вікно для перегляду зображень.*/\n\n export function createGallery(images) {\n // Перевіряю отриманий масив зображень\n  console.log('Виклик createGallery. Масив зображень:', images);\n\n  try {\n   // Генерую HTML-розмітку для кожного елемента з масиву зображень\n   const markup = images\n  .map(\n    ({\n      webformatURL, // URL для відображення маленького зображення\n      largeImageURL, // URL для великого зображення\n      tags, // Опис зображення\n      likes, // Кількість лайків\n     views, // Кількість переглядів\n     comments, // Кількість коментарів\n     downloads, // Кількість завантажень\n   }) => {\n     //Виводжу  дані, які обробляються.\n     console.log('Обробка зображення:', {\n       webformatURL,\n       largeImageURL,\n       tags,\n     });\n     return `\n   <li class=\"photo-card gallery-item\">\n     <a href=\"${largeImageURL}\" class=\"gallery-link\">\n     <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\" />\n     </a>\n   <div class=\"info\">\n    <p><b>Likes:</b> ${likes}</p>\n      <p><b>Views:</b> ${views}</p>\n      <p><b>Comments:</b> ${comments}</p>\n      <p><b>Downloads:</b> ${downloads}</p>\n    </div>\n  </li>`;\n     }\n   )\n\n    //Метод .join('') перетворює масив рядків, отриманих після виконання .map(), в єдиний рядок.\n   .join('');\n\n  // Додаю згенеровану розмітку в контейнер галереї\n  galleryContainer.insertAdjacentHTML('beforeend', markup);\n\n  // Перевіряю чи вже існує екземпляр SimpleLightbox\n    if (lightbox) {\n      lightbox.refresh(); // Якщо так,оновлюю існуючий екземпляр лайтбоксу для нових елементів\n    } else {\n      //створюю новий екземпляр SimpleLightbox\n      lightbox = new SimpleLightbox('.gallery a', {\n        captionsData: 'alt', // Використовую атрибут \"alt\" для підписів зображення\n        captionDelay: 250, // Затримка перед показом підпису\n      });\n    }\n   \n  } catch (error) {\n    console.error('Помилка у createGallery:', error);//виводжу помилку в консоль\n    throw error; //// Передаю помилку далі, щоб її можна було обробити\n  }\n}\n\n/*  Функція clearGallery.Видаляє всі зображення з галереї перед новим пошуком. Це дозволяє уникнути дублювання старих результатів.*/\n \n export  function clearGallery() {\n  try {\n    galleryContainer.innerHTML = ''; // видаляю весь HTML-контент с контейнера галереї\n\n\n    console.log('Галерея очищена.'); //  підтвержую очищення\n  } catch (error) {\n\n   // Обробка помилок під час очищення\n    console.error('Помилка у функції clearGallery:', error); // виводжу при помилке\n     throw new Error('Не вдалося очистити галерею.'); // нова помилка з описом\n  }\n }\n\n /*\n  Показує індикатор завантаження (loader).Ця функція керує видимістю .loader через зміну стилів.\n */\nexport function showLoader() {\n  if (loader) loader.style.display = 'block';\n  console.log('Індикатор завантаження показано.');\n}\n\n\n//  Ховає індикатор завантаження (loader).\n \nexport function hideLoader() {\n  if (loader) loader.style.display = 'none';\n  console.log('Індикатор завантаження сховано.');\n}\n\n// Показує кнопку \"Load More\".Вона має клас is-hidden, який потрібно видалити.\n\nexport function showLoadMoreButton() {\n  if (loadMoreButton) loadMoreButton.classList.remove('is-hidden');\n  console.log('Кнопку \"Load More\" показано.');\n}\n\n// Ховає кнопку \"Load More\".\n \nexport function hideLoadMoreButton() {\n  if (loadMoreButton) loadMoreButton.classList.add('is-hidden');\n  console.log('Кнопку \"Load More\" сховано.');\n}\n\n\n\n\n\n","/*Цей файл — є основним скриптом для пошукового застосунку зображень, який використовує API сервіс Pixabay.Він робить: \n1.Реалізує пошук зображень по ключовому слову (з введення користувача).\n2.Відображає результати у вигляді галереї.\n3.Додає кнопку \"Load More\" для підвантаження нових зображень (пагінація).\n3.Показує повідомлення у випадку помилок, успіху або завершення результатів.*/ \n\n// імпортую функціі. Тут функція робить HTTP-запит і повертає JSON-об'єкт з зображеннями\nimport { getImagesByQuery } from './js/pixabay-api.js';\n\n// функціі для роботи з DOM\nimport {\n  createGallery, // додає розмітку HTML для зображень\n  clearGallery, // очищає\n  showLoader,\n  hideLoader,\n  showLoadMoreButton,\n  hideLoadMoreButton,\n\n} from './js/render-functions.js';\n\nimport iziToast from 'izitoast';    // бібліотека для яскравих повідомлень користувачу\nimport 'izitoast/dist/css/iziToast.min.css';  // стилі для iziToast\n\n// шукаю елементи, отримую DOM\nconst form = document.querySelector('.form');                  // форма пошуку\nconst input = form.querySelector('input[name=\"search-text\"]');// поле введення пошукового тексту\nconst loader = document.querySelector('.loader');            // індикатор завантаження\nconst loadMoreButton = document.querySelector('.select');   // кнопка \"Load More\"\nconst gallery = document.querySelector('.gallery');// контейнер для галереї зображень\n\n\n// Змінні для курування станом пошуку\nlet currentQuery = '';     // поточний пошуковий запит\nlet currentPage = 1;      // номер поточної сторінки пошукового запиту\nlet totalHits = 0;       // загальна кількість знайдених зображень\nlet isLoading = false;  // прапорець, щоб уникнути повторного запиту, коли один уже триває\n\n\n// функція для симуляції завантаження (штучна затримка)\nasync function delay(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/* Основна функція для завантаження зображень\n   isFirstLoad = true - перший запит (початковий пошук),\n   false - запит при натисканні Load More */\nasync function loadImages(isFirstLoad = false) {\n  if (isLoading) {\n    console.log('Запит уже виконується, новий запит не запускається.');\n    return;\n  }\n  isLoading = true;\n\n  // Показую індикатор завантаження і ховаю кнопку \"Load More\"\n  showLoader();\n  \n  hideLoadMoreButton();\n\n  try {\n    await delay(2000); // штучна затримка (для тесту)\n\n    // Робимо запит до Pixabay за поточним запитом і сторінкою\n    const data = await getImagesByQuery(currentQuery, currentPage);\n\n    // Перевіряю, чи відповідає структура відповіді очікуваній\n    if (!data || !Array.isArray(data.hits)) {\n      throw new Error('Невалідна структура відповіді API');\n    }\n\n    // Якщо зображення не знайдено, очищаю галерею і виводжу повідомлення\n    if (data.hits.length === 0) {\n    \n      iziToast.info({\n        title: 'Нічого не знайдено',\n        message:\n          'Sorry, there are no images matching your search query. Please try again!',\n        position: 'topRight',\n      });\n      return;\n    }\n\n    // Якщо це перший запит, очищую галерею і виводжу загальну кількість знайдених зображень\n    if (isFirstLoad) {\n      clearGallery();\n      totalHits = data.totalHits;\n      iziToast.success({\n        title: 'Успіх',\n        message: `Знайдено ${totalHits} зображень.`,\n        position: 'topRight',\n      });\n    }\n    console.log('Дані, які передаються в createGallery:', data.hits);\n    // Додаю зображення до галереї\n    createGallery(data.hits);\n    console.log('Додані зображення:', data.hits);\n    console.log('Елемент .photo-card:', gallery.querySelector('.photo-card'));\n\n    // Скролінг\n  \n    const firstCard = gallery.querySelector('.photo-card');\n    console.log('Елемент .photo-card:', gallery.querySelector('.photo-card'));\n    if (firstCard) {\n      console.log('Перевірка: блок виконується');\n        const cardHeight = firstCard.getBoundingClientRect().height || 200;\n\n        console.log(cardHeight); // Вивести значення cardHeight в консоль\n        if (isFirstLoad) {\n          window.scrollTo({ top: 0, behavior: 'smooth' }); //Скрол сторінки плавно (behavior: 'smooth') переміщується на початок (top: 0).\n        } else {\n          const galleryHeight = gallery.scrollHeight; //повертає повну висоту вмісту елемента .gallery, включаючи частини, які виходять за межі видимої області.\n\n          if (galleryHeight > window.innerHeight) {\n            // Якщо висота галереї перевищує висоту видимої частини вікна браузера (window.innerHeight), виконується скрол.\n            window.scrollBy({ top: cardHeight * 2, behavior: 'smooth' }); //Плавний скрол сторінки вниз на висоту, рівну подвійному розміру однієї картки (cardHeight * 2).\n          }\n        }\n      }\n\n    // Розраховую максимальну кількість сторінок\n    const maxPages = Math.ceil(totalHits / 15);\n\n    // Якщо є ще сторінки, показую кнопку \"Load More\"\n    if (currentPage < maxPages) {\n      currentPage += 1; // Збільшую номер сторінки\n      \n      showLoadMoreButton();\n    } else {\n      // Якщо досягнуто кінця результатів, виводжу повідомлення\n      iziToast.info({\n        title: 'Кінець колекції',\n        message: \"We're sorry, but you've reached the end of search results.\",\n        position: 'topRight',\n      });\n    }\n    // У разі помилки виводжу повідомлення і логую помилку\n  } catch (error) {\n    console.error('Помилка запиту:', error);\n    iziToast.error({\n      title: 'Помилка',\n      message: 'Не вдалося завантажити зображення. Спробуйте пізніше.',\n      position: 'topRight',\n    });\n    // Ховаю індикатор завантаження і встановлюю прапорець isLoading у false\n  } finally {\n    hideLoader();\n    isLoading = false;\n  }\n}\n\n// Обробник події сабміту форми\nform.addEventListener('submit', async event => {\n  event.preventDefault(); // Запобігаю перезавантаженню сторінки за замовчуванням\n  const query = input.value.trim(); // Отримую текст запиту, видаляючи зайві пробіли\n\n  // Якщо запит порожній, виводжу повідомлення\n  if (!query) {\n    iziToast.error({\n      title: 'Помилка',\n      message: 'Будь ласка, введіть пошуковий запит.',\n      position: 'topRight',\n    });\n    return;\n  }\n\n  // Оновлюю пошукові параметри і очищую галерею\n  currentQuery = query;\n  currentPage = 1;\n  totalHits = 0;\n\n  clearGallery(); // Очищую попередній вміст галереї\n\n  await loadImages(true); // Завантажую зображення за новим запитом\n\n  input.value = ''; // Очищую поле вводу після запиту\n});\n\n// Обробник кліку на кнопку Load More\nloadMoreButton.addEventListener('click', async () => {\n  console.log('Кнопка Load More натиснута');\n  await loadImages(false);\n});\n\n\n"],"names":["API_KEY","BASE_URL","PER_PAGE","getImagesByQuery","query","page","params","axios","error","galleryContainer","loadMoreButton","loader","lightbox","createGallery","images","markup","webformatURL","largeImageURL","tags","likes","views","comments","downloads","SimpleLightbox","clearGallery","showLoader","hideLoader","showLoadMoreButton","hideLoadMoreButton","form","input","gallery","currentQuery","currentPage","totalHits","isLoading","delay","ms","resolve","loadImages","isFirstLoad","data","iziToast","firstCard","cardHeight","maxPages","event"],"mappings":"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"}