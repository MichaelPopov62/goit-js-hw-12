/*Призначення: Виконання HTTP-запитів до API Pixabay і повернення даних.

Функції:
getImagesByQuery(query):
  1.Формує параметри запиту (пошуковий запит, ключ API, кількість результатів тощо).
  2.Використовує axios для виконання запиту.
  3.Повертає дані (об'єкт із масивом зображень hits)
  4.Передає помилки, якщо запит не вдався.

        Зв'язок із main.js:
  1.Імпортується в main.js.
  2.Викликається при кожному пошуку для отримання даних.*/

// Імпортую бібліотеку для HTTP-запитів
import axios from 'axios';

//Створюю константи для роботи з API Pixabay
const API_KEY = '50290691-d51719558e36c91c48babc26d'; // Мій унікальний  API-ключ сервісу Pexibay

const BASE_URL = 'https://pixabay.com/api/'; // Базова URL-адреса для запитів

const PER_PAGE = 15;

// Функція для отримання зображень за пошуковим запитом
export async function getImagesByQuery(query) {
  // перевірка отриманого параметра функції
  // console.log('Виклик функції getImagesByQuery із запитом:', query);

  /*Створюю змінну де кладу параметри запиту, які будуть передані у URL.Використовуючи цю змінну, я передаю параметри у функцію axios.get, яка додає їх до запиту в форматі URL-параметрів (query string).*/
  const params = {
    key: API_KEY, // Мій ключ для автентифікації
    q: query, // Пошукове слово, що користувач ввів в пошукове поле
    image_type: 'photo', // фільтрую лише зображення
    orientation: 'horizontal', // Орієнтація зображень-горізогтальна
    safesearch: true, // Фільтр для безпечного пошуку
    per_page: PER_PAGE, // Максимальна кількість результатів за запитом
    page: 1,
  };


  
  
  

  //  перевіряю параметри запитуу створеному об'єкті
  // console.log('Параметри запиту сформовані:', params);

  /*Виконуємо GET-запит.Ця функція повертає Promise, який вирішується в об'єкт із даними від API
Цей рядок виконує HTTP-запит за допомогою бібліотеки axios. Він повертає проміс, який буде вирішений після завершення запиту.*/
  //   return (
  //     axios
  //       .get(BASE_URL, { params }) // GET-запит на сервер з базовою URL і параметрами

  //       //Успішний результат (об'єкт відповіді) обробляється в цьому блоці. Використовується стрілкова функція, щоб повернути лише дані відповіді (response.data).
  //       .then(response => response.data)

  //       //У разі помилки в процесі запиту вона передається далі за допомогою throw error;. Це дозволяє обробити помилку в обробнику catch() у місці виклику цієї функції.
  //       .catch(error => {
  //         throw error;
  //       })
  //   );
  // }
  //тут я прописую обробку помилки яка може виникнути під час запиту.Відбувається виклик axios.get  
  try {
    // Виконую GET-запит до API з використанням axios
    const response = await axios.get(BASE_URL, { params });
    // Повертаю дані (масив зображень hits)
    return response.data;
  } catch (error) {
    // Якщо сталася помилка, викидаю її для обробки на рівні виклику функції
    throw error;
  }
}